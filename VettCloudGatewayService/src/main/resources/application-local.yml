spring:
  application:
    name: Vett-Cloud-Gateway-Service

  config:
    activate:
      on-profile: local
    import: optional:file:.env[.properties]

  main:
    web-application-type: reactive

  cloud:
    gateway:
      server:
        webflux:
          routes:
            - id: vett-auth-service
              uri: lb://VETT-AUTH-SERVICE
              predicates:
                - Path=/api/v1/auth/**, /api/v1/user/**
            - id: vett-place-service
              uri: lb://VETT-PLACE-SERVICE
              predicates:
                - Path=/api/v1/places/**
            - id: vett-chat-service
              uri: lb://VETT-CHAT-SERVICE
              predicates:
                - Path=/api/v1/chatRooms/**, /api/v1/chat/**, /sub/**, /ws, /pub/**
            - id: vett-ai-record-service
              uri: lb://VETT-AI-RECORD-SERVICE
              predicates:
                - Path=/api/v1/ai/record/**
            - id: vett-ai-service
              uri: http://127.0.0.1:8085
              predicates:
                - Path=/api/v1/ai/**

          default-filters: DedupeResponseHeader=Access-Control-Allow-Origin Access-Control-Allow-Credentials

resilience4j:
  circuitbreaker:
    instances:
      passport:
        register-health-indicator: true
        sliding-window-size: 10
        failure-rate-threshold: 50
        wait-duration-in-open-state: 10000ms
        permitted-number-of-calls-in-half-open-state: 3
        event-consumer-buffer-size: 10


server:
  port: 8080
  servlet:
    session:
      timeout: 60m
      persistent: true

management:
  endpoints:
    web:
      exposure:
        include: "health,metrics,info,prometheus"
  endpoint:
    health:
      show-details: always
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${ZINKIN_SERVICE_URL}

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    allow-redirects: false
    service-url:
      defaultZone: ${EUREKA_SERVICE_URL}
  instance:
    hostname: ${EUREKA_INSTANCE_HOSTNAME}

logstash:
  host: ${LOGSTASH_HOST}

app:
  domain:
    client:
      local: ${APP_CLIENT_LOCAL_DOMAIN}
    auth-service:
      grpc-port: ${APP_AUTH_SERVICE_GRPC_PORT}
      grpc-host: ${APP_AUTH_SERVICE_GRPC_HOST}

  secret:
    jwt : ${APP_JWT_SECRET}
    passport: ${APP_PASSPORT_SECRET}

